# -*- coding: utf-8 -*-
"""Agibank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hfyPjRr0BlvlF2838Qg7uHJMMaUKJXQZ

Teste Agibank
"""

#Imports
import pandas as pd

#DataFrame
df = {'covariavel': ['Grupo A', 'Grupo A', 'Grupo A', 'Grupo A', 'Grupo A', 'Grupo A', 'Grupo B', 'Grupo B', 'Grupo B', 'Grupo B'],
         'Contratou': ['S', 'S', 'S', 'N', 'N', 'S', 'N', 'S', 'S','N']}
dados=pd.DataFrame(df)
dados

#Function - esta funcão se adecua a qualquer tamanho de dataframe, assim como qualquer quantidade de covariáveis;
def minha_funcao (a,b):
  s= a.loc[(a['Contratou'] == 'S')]
  n= a.loc[(a['Contratou'] == 'N')]

  total = pd.DataFrame(a.covariavel.value_counts())
  total = total.reset_index()
  total = total.rename(columns={'index': 'covariavel', 'covariavel': 'total'})

  if b == 's':
    sim = pd.DataFrame(s.value_counts())
    sim = sim.reset_index()
    sim = sim.rename(columns={0:'n'})
    sim = sim.drop(['Contratou'], axis=1)
    sim = pd.merge(sim, total, on='covariavel')
    sim.insert(loc=2, column= 'taxa_resposta', value= (sim.n / sim.total).round(decimals=2))
    sim = sim.drop(['total'], axis=1)
    return sim

  else:
    nao = pd.DataFrame(n.value_counts())
    nao = nao.reset_index()
    nao = nao.rename(columns={0:'n'})
    nao = nao.drop(['Contratou'], axis=1)
    nao = pd.merge(nao, total, on='covariavel')
    nao.insert(loc=2, column= 'taxa_resposta', value= (nao.n / nao.total).round(decimals=2))
    nao = nao.drop(['total'], axis=1)
    return nao

#Results
#Parâmetros --> a=dataframe , b= "s" ou "n" referente ao status do contrato;
minha_funcao(dados,"n")